version: 2.1

templates:
  tagged-filter: &tagged-filter
    tags:
      only: /^[0-9]+(\.[0-9]+)*((a|b|rc)[0-9]+)?(\.dev[0-9]+)?/

executors:
  ubuntu-builder:
    docker:
      - image: trustlines/builder:master61
    resource_class:
      medium
    working_directory: ~/repo

# define some common commands
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21
commands:
  create-venv:
    description: "Create venv"
    steps:
      - run:
          name: Create python venv
          command: |
            python3.8 -m venv venv
            venv/bin/pip install pip wheel setuptools

  config-path:
    description: "set environment variables and change PATH"
    steps:
    - run:
        name: Configuring PATH
        command: |
          echo >> ${BASH_ENV} 'export PATH=~/bin:~/repo/venv/bin:~/.cargo/bin:${PATH}'


jobs:
  install:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-path
      - restore_cache:
          key: venv-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements
          command: |
            pip install -r requirements.txt
      - run:
          name: Install dev-requirements
          command: |
            pip install -r dev-requirements.txt
      - run:
          name: Install codecov
          command: |
            pip install codecov==2.1.10
      - save_cache:
          key: venv-{{ checksum "dev-requirements.txt" }}-{{ checksum "requirements.txt" }}
          paths:
            - venv
      - run:
          name: Install package
          command: |
            pip install -e .
      - run:
          name: Verify installed packages have compatible dependencies
          command: |
            pip check
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  install-py39:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-path
      - create-venv
      - run:
          name: Install with python 3.9
          command: |
            pip install tox
            tox -e py39

  build-sdist:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-path
      - create-venv
      - run:
          name: Build distribution
          command: |
            python setup.py sdist
      - persist_to_workspace:
          root: "~"
          paths:
            - repo/dist

  check-sdist:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Check distribution
          command: |
            twine check dist/*

  run-pytest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run pytest
          # The 12 first lines ran are setting up a database when you are not able to use sudo
          # We set up a local test database for the database_integration tests because we cannot run
          # the database inside a docker container alongside the tests in circleci.
          # For explanation of commands see: https://datagrok.org/unix/a_little_postgres/
          # For explanation as to why we can't run docker see: https://support.circleci.com/hc/en-us/articles/115015849028-Docker-Daemon-Not-Available
          command: |
            export PGDATA="$PWD/pgdata"
            export PGHOST="$PGDATA/sockets"
            /usr/lib/postgresql/10/bin/pg_ctl init
            mkdir -p "$PGDATA/sockets"
            echo "unix_socket_directories = 'sockets'" >> "$PGDATA/postgresql.conf"
            /usr/lib/postgresql/10/bin/pg_ctl start
            export PGDATABASE="postgres"
            export PGUSER="$USER"
            createuser trustlines_test
            createdb trustlines_test
            echo "alter user trustlines_test with encrypted password 'test123';" | psql
            echo "grant all privileges on database trustlines_test to trustlines_test ;" | psql
            ./pytest --local-db True --cov=relay tests
            codecov



  upload-pypi:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Upload to pypi
          command: |
            twine upload dist/*

  build-docker-image:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/relay
      LOCAL_IMAGE: relay

    steps:
      - setup_remote_docker:
          version: 20.10.7
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build . -t $LOCAL_IMAGE
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  deploy-docker-image:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/relay
      LOCAL_IMAGE: relay
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload tagged version
          command: |
            version=$(docker run --rm $LOCAL_IMAGE --version | tr '+' '_')
            echo "Tagging with $version"
            docker tag $LOCAL_IMAGE $DOCKER_REPO:$version
            docker push $DOCKER_REPO:$version
      - run:
          name: Upload latest
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

  deploy-docker-image-release:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/relay
      LOCAL_IMAGE: relay
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: "~"
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload tagged release
          command: |
            version=$(docker run --rm $LOCAL_IMAGE --version | tr '+' '_')
            echo "Tagging version $version as release"
            docker tag $LOCAL_IMAGE $DOCKER_REPO:release
            docker push $DOCKER_REPO:release

  run-end2end-tests:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/relay
      LOCAL_IMAGE: relay
    working_directory: ~
    steps:
      - config-path
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: '~'
      - run:
          name: Checkout end2end repo
          command: |
            git clone https://github.com/trustlines-protocol/end2end.git
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: run end2end tests
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO
            cd end2end
            ./run-e2e.sh
      - run:
          name: copy out the end2end coverage file from remote docker to host
          command: |
            scp circleci@remote-docker:project/end2end/end2end-coverage/coverage.xml /home/circleci/repo/coverage.xml
      - run:
          name: upload end2end codecov
          command: |
            cd ~/repo
            codecov --file coverage.xml

  run-backwards-compatibiltiy-end2end-tests:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/relay
      LOCAL_IMAGE: relay
    working_directory: ~
    steps:
      - setup_remote_docker:
          version: 20.10.7
      - attach_workspace:
          at: '~'
      - run:
          name: Checkout end2end repo
          command: |
            git clone https://github.com/trustlines-protocol/end2end.git
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: run end2end tests against latest stable clientlib
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO
            cd end2end
            # Should point to latest stable clientlib e2e tests
            TL_E2E_IMAGE=trustlines/e2e:v0.15.0 ./run-e2e.sh

  pre-commit-checks:
    executor: ubuntu-builder
    steps:
      - checkout
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/venv/bin:${PATH}' >> ${BASH_ENV}
      - create-venv
      - run:
          name: Install pre-commit
          command: |
            pip install -c dev-requirements.txt pre-commit
      - run:
          name: Check for large files
          command: |
            pre-commit run -a check-added-large-files
      - run:
          name: Check byte order mark
          command: |
            pre-commit run -a check-byte-order-marker
      - run:
          name: Check merge conflict
          command: |
            pre-commit run -a check-merge-conflict
      - run:
          name: Check json files
          command: |
            pre-commit run -a check-json
      - run:
          name: Check yaml files
          command: |
            pre-commit run -a check-yaml
      - run:
          name: Run end-of-file-fixer
          command: |
            pre-commit run -a end-of-file-fixer
      - run:
          name: Run trailing-whitespace fixer
          command: |
            pre-commit run -a trailing-whitespace
      - run:
          name: Run isort
          command: |
            pre-commit run -a isort
      - run:
          name: Run black
          command: |
            pre-commit run -a black
      - run:
          name: Run flake8
          command: |
            pre-commit run -a flake8
      - run:
          name: Run mypy
          command: |
            pre-commit run -a mypy



workflows:
  version: 2
  default:
    jobs:
      - install:
          filters:
            <<: *tagged-filter

      - install-py39:
          filters:
            <<: *tagged-filter

      - build-sdist:
          filters:
            <<: *tagged-filter

      - check-sdist:
          requires:
            - build-sdist
          filters:
            <<: *tagged-filter

      - pre-commit-checks:
          filters:
            <<: *tagged-filter

      - run-pytest:
          requires:
            - install
          filters:
            <<: *tagged-filter

      - upload-pypi:
          requires:
            - pre-commit-checks
            - run-pytest
            - build-sdist
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/
          context: pypi-credentials

      - build-docker-image:
          filters:
            <<: *tagged-filter

      - run-end2end-tests:
          filters:
            <<: *tagged-filter
          requires:
            - install
            - build-docker-image

      - run-backwards-compatibiltiy-end2end-tests:
          filters:
            <<: *tagged-filter
          requires:
            - build-docker-image

      - deploy-docker-image:
          filters:
            <<: *tagged-filter
            branches:
              only: master
          requires:
            - pre-commit-checks
            - run-pytest
            - install
            - build-docker-image
          context: docker-credentials

      - deploy-docker-image-release:
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/
          requires:
            - pre-commit-checks
            - run-pytest
            - install
            - build-docker-image
          context: docker-credentials
