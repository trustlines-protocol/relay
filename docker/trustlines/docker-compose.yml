version: "3"
services:
  db:
    image: postgres
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - backend
    volumes:
      - postgres-data:/var/lib/postgresql/data


  tlbc:
    image: trustlines/tlbc-testnet
    command: "--role observer"
    volumes:
      - blockchain-data:/data
      - tlbc-config:/config/custom
      - enode-dir:/config/network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    expose:
      - "8545"
    ports:
      - "30300:30300"
      - "30300:30300/udp"
    networks:
      - backend
    restart: unless-stopped


  relay:
    image: trustlines/relay
    depends_on:
      - "db"
      - "tlbc"
    volumes:
      - ./config.json:/opt/relay/config.json
      - ./addresses.json:/opt/relay/addresses.json
    # make relay server listen on port 5000. In a real scenario you will want to
    # put a proxy like nginx, apache or traefik in front of the relay server
    ports:
      - "5000:5000"
    environment:
      - PGHOST
      - PGUSER
      - PGDATABASE
      - PGPASSWORD
    networks:
      - backend
    restart: unless-stopped

  index:
    image: trustlines/py-eth-index
    depends_on:
      - "db"
      - "tlbc"
    environment:
      - PGHOST
      - PGUSER
      - PGDATABASE
      - PGPASSWORD
    networks:
      - backend
    restart: unless-stopped
    command: ["/opt/ethindex/bin/ethindex", "runsync", "--jsonrpc", "http://tlbc:8545"]
    volumes:
      - ./addresses.json:/tmp/addresses.json
      - ./contracts.json:/tmp/contracts.json


volumes:
  blockchain-data:
  tlbc-config:
  enode-dir:
  postgres-data:
networks:
  backend:
